openapi: 3.0.0
info:
  title: employeeCRUD
  description: 'This API is based in the management of the employees of an enterprise. It is a CRUD API where you can add, remove, edit, and find information related to the employees.'
  version: 1.0.0
  contact:
    name: Jorge
servers:
  - url: 'https://localhost:3000'
    description: Local server for testing and develop the API
tags:
  - name: Employee
    description: Features related to the management of employees of a specific company
paths:
  /employees:
    get:
      summary: Retrieve a list of employees
      security:
        - token:
            - read
      description: You get back a list of all the employees of the company
      operationId: listEmployees
      tags:
        - Employee
      parameters:
        - name: limit
          in: query
          description: Number of items to return per page
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            example: 10
        - name: offset
          in: query
          description: Number of items to skip before the desired information
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 100
            example: 20
        - name: firstName
          in: query
          description: Filter the results by the name
          required: false
          schema:
            type: string
            example: Jorge
            pattern: '^[A-Z]{1}[a-z]{2,14}'
            maxLength: 15
        - name: sortBy
          in: query
          description: Field to sort the results by
          required: false
          schema:
            type: string
            example: firstName
            maxLength: 15
            pattern: '^[A-Za-z\s]{2,15}$'
            
        - name: sortOrder
          in: query
          description: The sort order of the results
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
            example: ASC
      responses:
        '200':
          $ref: '#/components/responses/200GetEmployees'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '406':
          $ref: '#/components/responses/406NotAcceptable'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnsupportedEntity'
        '429':
          $ref: '#/components/responses/429TooManyRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultResponse'
          
    post:
      summary: Creates a new employee
      security:
        - token:
            - write
      operationId: createEmployee
      tags:
        - Employee
      description: Creates a new employee with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeNoId'
      responses:
        '201':
          description: The employee was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '406':
          $ref: '#/components/responses/406NotAcceptable'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnsupportedEntity'
        '429':
          $ref: '#/components/responses/429TooManyRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultResponse'

  '/employees/{employeeId}':
    parameters:
      - $ref: '#/components/parameters/EmployeeId'
    get:
      summary: We get the information related to a desire employee
      description: Retrieve the expected information about one worker
      security:
        - token:
            - read
      operationId: listOneEmployee
      tags:
        - Employee
      responses:
        '200':
          description: The information related to the desired employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeBasicInfo'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '406':
          $ref: '#/components/responses/406NotAcceptable'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnsupportedEntity'
        '429':
          $ref: '#/components/responses/429TooManyRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultResponse'
          
    put:
      summary: You can modify completely the information related to one employee
      description: Operation to modify completely one employee
      security:
        - token:
            - write
      operationId: editFullEmployee
      tags:
        - Employee
      requestBody:
        description: The information we want to upload of the desire employee
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeNoId'
      responses:
        '200':
          description: The operation of modifying the information of the employee has been successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '406':
          $ref: '#/components/responses/406NotAcceptable'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnsupportedEntity'
        '429':
          $ref: '#/components/responses/429TooManyRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultResponse'
    patch:
      summary: Partyally updates an existing employee
      description: Update the specific fields of and employee identified by the employeeId
      security:
        - token:
            - write
      operationId: patchEmployee
      tags:
        - Employee
      requestBody:
        description: The information we want to change
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeBasicInfo'
      responses:
        '200':
          description: Employee successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '406':
          $ref: '#/components/responses/406NotAcceptable'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnsupportedEntity'
        '429':
          $ref: '#/components/responses/429TooManyRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultResponse'
    delete:
      summary: Deletes an employee
      description: Deletes the employee by the employeeId
      security:
        - token:
            - delete
      operationId: deleteEmployee
      tags:
        - Employee
      responses:
        '200':
          description: Employee successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '406':
          $ref: '#/components/responses/406NotAcceptable'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnsupportedEntity'
        '429':
          $ref: '#/components/responses/429TooManyRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultResponse'

  '/employees/{employeeId}/email':
    parameters:
      - $ref: '#/components/parameters/EmployeeId'
    post:
      summary: The request to the external api for validating the email
      security:
        - token:
            - read
      description: Validate the email address
      operationId: validateEmail
      tags:
        - Employee
      requestBody:
        description: The email addres to validate it
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 40
                  example: empleados@uxcale.com
                  pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
              required:
                - email
              additionalProperties: false
      responses:
        '200':
          description: The email was successfully validated
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                    pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
                    minLength: 1
                    maxLength: 100
                    example: empleados@uxcale.com
                  isValid:
                    type: boolean
                    description: Indicates if the email is valid or not
                    example: true
                  employeeId:
                    type: integer
                    description: The ID of the employee
                    example: 123
                required:
                  - email
                  - isValid
                  - employeeId
                additionalProperties: false
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '406':
          $ref: '#/components/responses/406NotAcceptable'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnsupportedEntity'
        '429':
          $ref: '#/components/responses/429TooManyRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        default:
          $ref: '#/components/responses/defaultResponse'

components:
  securitySchemes:
    token:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://www.example.com:3000'
          scopes:
            read: read the information of employees
            write: make changes and upload new employees
            delete: removes employees
  headers:
    XRequestIdHeader: # Permite asociar a cada solicitud un ID unico, facilitando el seguimiento, depuración y trazabilidad. GET, POST, PUT, DELETE, PATCH
      description: Request ID.
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$'
        format: uuid
        minLength: 1
        maxLength: 40
        example: 54b9c11c-9162-45a1-a352-0d95734cd079
  parameters:
    EmployeeId: 
      name: employeeId
      description: The desire Id of the employee for validating the email
      in: path
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 999
        example: 123

  schemas:
    DefaultError:
      type: object
      properties:
        type:
          type: string
          maxLength: 30
          pattern: '^[\s\S]{2,}$'
        message:
          type: string
          maxLength: 100
          pattern: '^[\s\S]{2,}$'
        description:
          type: string
          maxLength: 255
          pattern: '^[\s\S]{2,}$'
      required:
        - type
        - message
      additionalProperties: false
    Errors:
      type: object
      properties:
        code:
          type: string
          maxLength: 100
          pattern: '^[\s\S]{2,}$'
        type:
          type: string
          maxLength: 30
          pattern: '^[\s\S]{2,}$'
        message:
          type: string
          maxLength: 100
          pattern: '^[\s\S]{2,}$'
        description:
          type: string
          maxLength: 255
          pattern: '^[\s\S]{2,}$'
      required:
        - code
        - type
        - message
      additionalProperties: false
    EmployeeId:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12
          minimum: 1
          maximum: 999
      required:
        - id
      additionalProperties: false
    EmployeeBasicInfo:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/EmployeeId'
        username:
          type: string
          description: nickname
          example: jmilla
          pattern: '^[A-Za-z0-9]{3,10}$'
        firstName:
          type: string
          description: first name of the employee
          example: Jorge
          pattern: '^[A-Za-z\s]{2,15}$'
        email:
          type: string
          description: email of the employee
          format: email
          example: jmilla@gmail.com
          minLength: 4
          maxLength: 30
          pattern: '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
      required:
        - id
        - username
        - firstName
        - email
    Employee:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          format: int64
          example: 12
          minimum: 1
          maximum: 999
        username:
          type: string
          description: nickname
          example: jmilla4
          pattern: '^[a-z]{5,15}[0-9]{1,3}$'
        firstName:
          type: string
          description: first name of the employee
          example: Jorge
          pattern: '^[A-Z]{1}[a-z]{2,15}$'
        lastName:
          type: string
          description: first surname
          example: Milla
          pattern: '^[A-Z]{1}[a-z]{2,15}$'
        lastName2:
          type: string
          description: second surname
          example: Hernandez
          pattern: '^[A-Z]{1}[a-z]{2,15}$'
        identification:
          type: string
          description: Numbers of the DNI
          example: 70888999A
          pattern: '^[0-9]{8}[A-Z]{1}$'
        email:
          type: string
          description: email of the employee
          format: email
          example: jmilla@uxcale.com
          pattern: '^[a-z]{1,10}@uxcale\.com$'
        phone:
          type: string
          description: phone number of the employee
          pattern: '^\+34\d{9}$'
          example: '+34600123456'
        userStatus:
          type: string
          description: current status of the employee
          enum:
            - ACTIVE
            - PENDING
            - REMOVED
          example: PENDING
        date:
          type: string
          format: date
          description: Date of birth
          example: '2024-09-06'
          minLength: 10
          maxLength: 10
      required:
        - username
        - firstName
        - lastName
        - email
        - phone
        - userStatus
        - date
        
    EmployeeNoId:
      type: object
      additionalProperties: false
      properties:
        username:
          type: string
          description: nickname
          example: jmilla4
          pattern: '^[a-z]{5,15}[0-9]{1,3}$'
        firstName:
          type: string
          description: first name of the employee
          example: Jorge
          pattern: '^[A-Z]{1}[a-z]{2,15}$'
        lastName:
          type: string
          description: first surname
          example: Milla
          pattern: '^[A-Z]{1}[a-z]{2,15}$'
        lastName2:
          type: string
          description: second surname
          example: Hernandez
          pattern: '^[A-Z]{1}[a-z]{2,15}$'
        identification:
          type: string
          description: Numbers of the DNI
          example: 70888999A
          pattern: '^[0-9]{8}[A-Z]{1}$'
        email:
          type: string
          description: email of the employee
          format: email
          example: jmilla@uxcale.com
          pattern: '^[a-z]{1,10}@uxcale\.com$'
        phone:
          type: string
          description: phone number of the employee
          pattern: '^\+34\d{9}$'
          example: '+34600123456'
        userStatus:
          type: string
          description: current status of the employee
          enum:
            - ACTIVE
            - PENDING
            - REMOVED
          example: PENDING
        date:
          type: string
          format: date
          description: Date of birth
          example: '2024-09-06'
          minLength: 10
          maxLength: 10
      required:
        - username
        - firstName
        - lastName
        - email
        - phone
        - userStatus
        - date
  responses:
    400BadRequest:
      description: Bad request
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-bad-request-400:
              $ref: '#/components/examples/example-bad-request-400'
    
    401Unauthorized:
      description: The user is not allowed to access this resource
      headers: 
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples: 
            example-unauthorized:
              $ref: '#/components/examples/example-unauthorized-401'
            
    403Forbidden:
      description: The user is not allowed to access this resource
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-Forbidden-403:
              $ref: '#/components/examples/example-forbidden-403'

    404NotFound:
      description: The requested resource was not found
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-not-found:
              $ref: '#/components/examples/example-not-found-404'
            
    500InternalServerError:
      description: Internal server error
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-internal-server-error-500:
              $ref: '#/components/examples/example-internal-server-error-500'
    406NotAcceptable:
      description: Not acceptable
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-not-acceptable:
              $ref: '#/components/examples/example-not-acceptable-406'

    415UnsupportedMediaType:
      description: The type of the data is not compatible with the resource
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-unssuported:
              $ref: '#/components/examples/example-unsupported-415'
    
    422UnsupportedEntity:
      description: The request was well-formed but was unable to be followed due to semantic errors.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-unsupported-entity:
              $ref: '#/components/examples/example-unsupported-entity-422'

    429TooManyRequest:
      description: Too many request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
          examples:
            example-too-many-request:
              $ref: '#/components/examples/example-too-many-request-429'
            
    200GetEmployees:
      description: OK
      headers: 
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            type: object
            properties:
              offset: 
                type: integer
              limit: 
                type: integer
              items: 
                type: array
                maxItems: 100
                items:
                  $ref: '#/components/schemas/Employee'
            additionalProperties: false
          examples:
            example-get-employees:
              $ref: '#/components/examples/example-success-200'
            

    defaultResponse:
      description: Default error response for unexpected errors.
      headers:
        X-Request-ID:
          $ref: '#/components/headers/XRequestIdHeader'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
          examples:
            example-too-many-request:
              $ref: '#/components/examples/example-default-error'


              
  examples:
    example-success-200:
      summary: Successfully retrieved employees
      value:
        offset: 0
        limit: 10
        items:
          - id: 1
            username: jmilla4
            firstName: Jorge
            lastName: Milla
            lastName2: Hernandez
            identification: 70888999A
            email: jmilla@uxcale.com
            phone: '+34600123456'
            userStatus: PENDING
            date: '2024-09-06'
          - id: 2
            username: jidedsa5
            firstName: John
            lastName: Doe
            lastName2: Smith
            identification: 12345678B
            email: jdoe@uxcale.com
            phone: '+34600123457'
            userStatus: ACTIVE
            date: '2024-09-07'
    example-bad-request-400:
      summary: Bad request
      value: 
        code: '400'
        type: 'ERROR'
        message: '400 The request is not correct'
        description: 'An error has occurred'
    example-unauthorized-401:
      summary: unauthorized
      value: 
        code: '401'
        type: 'ERROR'
        message: '401 Not authorized to access'
        description: 'Unauthorized to access to this resource' 
    example-forbidden-403:
      summary: Bad request
      value: 
        code: '403'
        type: 'ERROR'
        message: '403 Access Forbidden'
        description: 'Access Forbidden' 
    example-not-found-404:
      summary: not found
      value: 
        code: '404'
        type: 'ERROR'
        message: '404 Resource not found'
        description: 'Not found' 
    example-not-acceptable-406:
      summary: not acceptable
      value: 
        code: '406'
        type: 'ERROR'
        message: '406 Request not acceptable'
        description: 'Not acceptable' 
    example-unsupported-415:
      summary: not supported
      value: 
        code: '415'
        type: 'ERROR'
        message: '415 Resource is not same data type'
        description: 'Not supported' 
    example-unsupported-entity-422:
      summary: not supported
      value: 
        code: '422'
        type: 'ERROR'
        message: '422 Resource is not supported'
        description: 'Not supported' 
    example-too-many-request-429:
      summary: too many request
      value: 
        code: '429'
        type: 'ERROR'
        message: '429 Too many request'
        description: 'Too many request' 
    example-internal-server-error-500:
      summary: Internal server error
      value: 
        code: '500'
        type: 'ERROR'
        message: ' 500 Internal server error'
        description: 'Internal server error' 
    example-default-error:
      summary: Internal server error
      value: 
        type: 'ERROR'
        message: ' Default error'
        description: 'Default error'

      
        

          
    
      
          